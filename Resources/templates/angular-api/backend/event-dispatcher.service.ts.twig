import { Injector, Injectable } from '@angular/core';
import { Subject } from 'rxjs/Subject';

@Injectable()
export class EventDispatcher {
    private listeners = {};
    private subject = new Subject();

    constructor(private injector: Injector) {

        this.subject.subscribe(
            ({ name, args }) => {
                if (this.listeners[ name ]) {
                    for (const listener of this.listeners[ name ]) {
                        console.log('EventDispatcher: listen ' + name);
                        console.log(listener);
                        listener(...args);

                    }
                }
            });
    }

    on(name, listener): Function {
        if (!this.listeners[ name ]) {
            this.listeners[ name ] = [];
        }

        this.listeners[ name ].push(listener);
        return () => this.disconnect(name, listener);
    }

    disconnect(name, listener): void {
        if (!this.listeners[ name ]) {
            return;
        }

        const index = this.listeners[ name ].indexOf(listener);

        if (index > -1) {
            console.log('disconnected');
            this.listeners[ name ].splice(index, 1);
        }
    }

    broadcast(name, ...args): void {
        console.log('EventDispatcher: broadcast ' + name);
        this.subject.next({
            name,
            args
        });
    }
}
