{% autoescape false %}
// Generated class BaseApi{{ tag|class_name }}
{% import '@draw_swagger_generator/angular-api/macro.ts.twig' as macro %}
// Generated class BaseApiUsers
import { AppHttp } from '../app-http.service';
import { Injectable } from '@angular/core';
import { Headers, RequestOptionsArgs, Response, URLSearchParams } from '@angular/http';

import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models from '../model';

/* tslint:disable:no-unused-variable member-ordering */

export class BaseApi{{ tag|class_name }} {
    public defaultHeaders: Headers = new Headers();

    constructor(public appHttp: AppHttp) {
    }

{% for path, pathItem in swagger.paths %}
{% for method, operation in pathItem.getOperations() %}
{% if tag in operation.tags %}
{% set operationParameter = operation|extract_operation_parameters(dsg.registry.ts.type_mapping) %}
    /**
     *{{ macro.list_operation_params_doc(operation.parameters, dsg.registry.ts.type_mapping) }}
     {%- if hasBodyParams(operation) == true %}{{ "\n     * @param body" }}{% endif %}{{ "" }}
     * @param queries
     {%- if hasQueryParams(operation) == true %}{{ macro.list_query_params_doc(operation.parameters, dsg.registry.ts.type_mapping) }}{% endif %}{{ "" }}
     */
    public {{ operation.operationId|camelize|camelizeDash|lcfirst }} (
        {{- macro.list_operation_params(operation.parameters, dsg.registry.ts.type_mapping) }}
        {% if hasBodyParams(operation) == true -%}
        body?: {{ macro.list_body_params(operation.parameters, dsg.registry.ts.type_mapping) }},
        {% endif -%}
        queries?: any,
        {%- if hasQueryParams(operation) == true %}{{ macro.list_query_params(operation.parameters, dsg.registry.ts.type_mapping) }}{% endif %}{{ "" }}
    ): Observable<{{ getModelByOperation(operation, 'models.', '{}') }}{% if operation|schema_type_of_operation( dsg.registry.ts.type_mapping) == "array" %}[]{% endif %}> {

        {{ macro.create_path(path, operation.parameters, dsg.registry.ts.type_mapping) }}

        const queryParameters = new URLSearchParams();
        const headerParams = this.defaultHeaders;

        if (queries) {
           for (let key in queries) {
               if (queries[key]) {
                   queryParameters.set(key, queries[key].toString());
               }
           }
        }
{% if hasQueryParams(operation) == true %}
{{ macro.redefine_query_params(operation.parameters, dsg.registry.ts.type_mapping) }}
{% endif %}
{{ macro.operation_params_require(operation.parameters, dsg.registry.ts.type_mapping, operation) }}

        const requestOptions: RequestOptionsArgs = {
            method: '{{ method|upper }}',
            headers: headerParams,
            search: queryParameters
        };
{% if hasBodyParams(operation) == true %}
        requestOptions.body = body{% if macro.is_body_serializable(operation.parameters) != "" %}.serialize(){% endif %};
{% endif %}

        return this.appHttp.request(routePath, requestOptions)
            .map((response: Response) => {
{{ macro.handle_responses(operation) }}
            });
    }

{% endif %}
{% endfor %}
{% endfor %}
}




{% endautoescape %}
