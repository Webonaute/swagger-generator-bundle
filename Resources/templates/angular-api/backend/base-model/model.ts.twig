{% autoescape false %}
// Generated class Base{{ definitionName|class_name }}
{% include [current_directory ~ "/_imports.twig"] %}
export abstract class Base{{ definitionName|class_name }} implements ModelInterface {
{% for propertyName, property in schema.properties -%}
    {% set type = property|convert_type(dsg.registry.ts.type_mapping) %}
    // Groups(
    {%- for serializerGroup in property.serializerGroups -%}
        {"{{ serializerGroup }}"}{% if loop.revindex != 1 %},{% endif -%}
    {%- endfor -%}
    )
{% if property.readOnly == true %}
    // Read-only
{% endif %}
    private _{{ propertyName }}: {% if type != "array" %}{{ type }}{% else %}{{ property.items|convert_type(dsg.registry.ts.type_mapping) }}[]{% endif %} = null;
{% endfor %}

{% for propertyName, property in schema.properties %}
{% set type = property|convert_type(dsg.registry.ts.type_mapping) %}
    get {{ propertyName }}(): {% if type != "array" %}{{ type }}{% else %}{{ property.items|convert_type(dsg.registry.ts.type_mapping) }}[]{% endif %}

    {
        return this._{{ propertyName }};
    }
{% if property.readOnly == false %}

    set {{ propertyName }}({{ propertyName }}: {% if type != "array" %}{{ type }}{% else %}{{ property.items|convert_type(dsg.registry.ts.type_mapping) }}[]{% endif %})
    {
        this._{{ propertyName }} = {{ propertyName }};
    }
{% endif %}

{% endfor %}

    // internal
    public serialize(): any {
        return {
{% for propertyName, property in schema.properties %}
{% set type = property|convert_type(dsg.registry.ts.type_mapping) %}
            {{ propertyName ~ ": (this._" ~ propertyName ~ ") ? this._" ~ propertyName -}}
{% if type not in ["string", "integer", "number", "boolean"] %}
{% if type != "array" %}
    {{- ".serialize()" -}}
{% else %}
{% if property.items|convert_type(dsg.registry.ts.type_mapping) not in ["string", "integer", "number", "boolean"] %}
    {{- ".map(\n               (" ~ propertyName ~ ") => " ~ propertyName ~ ".serialize()\n            )" -}}
{% endif %}
{% endif %}
{% endif %}
    {{- " : null" -}}
{% if loop.last == false %}{{- "," -}}{% endif %}{{ "" }}
{% endfor %}
        };
    }

    // internal
    public hydrate(object: any): Base{{ definitionName|class_name }} {
{% for propertyName, property in schema.properties %}
{% set type = property|convert_type(dsg.registry.ts.type_mapping) %}
        {{ "this._" ~ propertyName ~ " = (object." ~ propertyName ~ ") ? " -}}
{% if type not in ["string", "integer", "number", "boolean"] %}
{% if type != "array" %}
        {{- "new " ~ type ~ "().hydrate(object." ~ propertyName ~ ")" -}}
{% else %}
{% if property.items|convert_type(dsg.registry.ts.type_mapping) not in ["string", "integer", "number", "boolean"] %}
        {{- "object." ~ propertyName ~ ".map(\n            (" ~ propertyName ~ ") => new " ~ property.items|convert_type(dsg.registry.ts.type_mapping) ~ "().hydrate(" ~ propertyName ~ ")\n        )" -}}
{% else %}
        {{-  "object." ~ propertyName -}}
{% endif %}
{% endif %}
{% else %}
        {{-  "object." ~ propertyName -}}
{% endif %}{{- " : null;" }}
{% endfor %}
        return this;
    }
}
{% endautoescape %}