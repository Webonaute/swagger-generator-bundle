{% autoescape false %}
//Generated class Base{{ definitionName|class_name }}
'use strict';
{% include [current_directory ~ "/_imports.twig"] %}
export abstract class Base{{ definitionName|class_name }}
{
{% for propertyName, property in schema.properties %}
{% set type = property|convert_type(dsg.registry.ts.type_mapping) %}
    private  _{{ propertyName }}:{% if type != "array" %}{{ type }}{% else %}{{ property.items|convert_type(dsg.registry.ts.type_mapping) }}[]{% endif %} = null;
{% endfor %}

{% for propertyName, property in schema.properties %}
{% set type = property|convert_type(dsg.registry.ts.type_mapping) %}
    get {{ propertyName }}():{% if type != "array" %}{{ type }}{% else %}{{ property.items|convert_type(dsg.registry.ts.type_mapping) }}[]{% endif %}

    {
        return this._{{ propertyName }};
    }
{% if property.readOnly == false %}

    set {{ propertyName }}({{ propertyName }}:{% if type != "array" %}{{ type }}{% else %}{{ property.items|convert_type(dsg.registry.ts.type_mapping) }}[]{% endif %})
    {
        this._{{ propertyName }} = {{ propertyName }};
    }
{% endif %}

{% endfor %}

    // internal
    public serialize(): any {
        return {
{% for propertyName, property in schema.properties %}
            {{ propertyName }}: this._{{ propertyName }}{% if loop.last == false %},{% endif %}{{ " " }}
{% endfor %}
        };
    }

    // internal
    public hydrate(object: any): void {
{% for propertyName, property in schema.properties %}
        this._{{ propertyName }} = object.{{ propertyName }};
{% endfor %}
    }
}
{% endautoescape %}